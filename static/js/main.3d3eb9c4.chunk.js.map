{"version":3,"sources":["redux/strings/text-reducers.jsx","servicesAPI/text-api.jsx","redux/strings/text-operations.jsx","Components/FormQuery/FormQuery.jsx","Components/App/App.jsx","redux/store.js","index.js"],"names":["createSlice","name","initialState","isText","isLoading","error","reducers","queryTextRequest","state","queryTextSuccess","payload","queryTextError","actions","reducer","axios","defaults","baseURL","serviceAPI","getTextList","listID","get","headers","Accept","FormQuery","useState","idText","setIdText","dispatch","useDispatch","className","styles","formQuery","onSubmit","event","preventDefault","a","console","log","data","message","formQuery__input","type","value","onChange","target","placeholder","required","App","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAQA,EAA6BA,YAAY,CACvCC,KAAM,OACNC,aARkB,CAClBC,OAAQ,GACRC,WAAW,EACXC,MAAO,MAMPC,SAAU,CACRC,iBAAkB,SAACC,GACjBA,EAAMJ,WAAY,GAEpBK,iBAAkB,SAACD,EAAD,GAAyB,IAAfE,EAAc,EAAdA,QAC1BF,EAAML,OAASO,EACfF,EAAMJ,WAAY,GAEpBO,eAAgB,SAACH,EAAD,GAAyB,IAAfE,EAAc,EAAdA,QACxBF,EAAMH,MAAQK,EACdF,EAAMJ,WAAY,MAbhBQ,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,Q,0CCLjBC,IAAMC,SAASC,QAAf,UADa,uCACb,2CAGA,IAYeC,EAZI,CACjBC,YADiB,SACLC,GACV,OAAOL,IAAMM,IAAN,uBAA0BD,GAAU,CACzCE,QAAS,CACPC,OAAQ,kBACR,cAAe,oCCRff,EAAuDK,EAAvDL,iBAAoCI,GAAmBC,EAArCH,iBAAqCG,EAAnBD,gB,wBCgC7BY,EA9BG,WAChB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAWC,cAYjB,OACE,uBAAMC,UAAWC,IAAOC,UAAWC,SAXX,SAACC,GDJX,IAACd,ECKfc,EAAMC,iBACNP,GDNeR,ECMIM,EDNL,uCAAY,WAAOE,GAAP,eAAAQ,EAAA,6DAC5BR,EAASpB,KADmB,SAG1B6B,QAAQC,IAAI,uEACZD,QAAQC,IAAIlB,GAJc,SAKPF,EAAWC,YAAYC,GALhB,OAKpBmB,EALoB,OAM1BF,QAAQC,IAAIC,GANc,kDAQ1BX,EAAShB,EAAe,KAAM4B,UARJ,0DAAZ,yDCed,UACE,uBACEV,UAAWC,IAAOU,iBAClBC,KAAK,OACLxC,KAAMwB,EACNiB,MAAOjB,EACPkB,SAZoB,SAACV,GACzB,IAAIR,EAASQ,EAAMW,OAAOF,MAC1BhB,EAAUD,IAWNoB,YAAY,kFACZC,UAAQ,IAEV,sGCpBSC,EARH,WACV,OACE,qBAAKlB,UAAU,MAAf,SACE,cAAC,EAAD,O,OCcAmB,EAAQC,YAAe,CAC3BpC,QAAS,CACPV,OAAQU,GAEVqC,WAXiB,SAACC,GAAD,OACjBA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAS9DC,UAAUC,IClBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUhB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJiB,SAASC,eAAe,W","file":"static/js/main.3d3eb9c4.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialText = {\r\n  isText: [],\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nconst { actions, reducer } = createSlice({\r\n  name: \"text\",\r\n  initialState: initialText,\r\n  reducers: {\r\n    queryTextRequest: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    queryTextSuccess: (state, { payload }) => {\r\n      state.isText = payload;\r\n      state.isLoading = false;\r\n    },\r\n    queryTextError: (state, { payload }) => {\r\n      state.error = payload;\r\n      state.isLoading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport { actions, reducer };\r\n","import axios from \"axios\";\r\n\r\nconst cors = \"https://cors-anywhere.herokuapp.com/\";\r\naxios.defaults.baseURL = `${cors}http://tmgwebtest.azurewebsites.net/api`;\r\n// axios.defaults.headers.common[\"TMG-Api-Key\"] = \"0J/RgNC40LLQtdGC0LjQutC4IQ==\";\r\n\r\nconst serviceAPI = {\r\n  getTextList(listID) {\r\n    return axios.get(`/textstrings/${listID}`, {\r\n      headers: {\r\n        Accept: \"aplication/json\",\r\n        \"TMG-Api-Key\": \"0J/RgNC40LLQtdGC0LjQutC4IQ==\",\r\n        // \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n  },\r\n};\r\n\r\nexport default serviceAPI;\r\n","import serviceAPI from \"../../servicesAPI\";\r\nimport { actions } from \".\";\r\n\r\nconst { queryTextRequest, queryTextSuccess, queryTextError } = actions;\r\n\r\nconst queryText = (listID) => async (dispatch) => {\r\n  dispatch(queryTextRequest());\r\n  try {\r\n    console.log(\"пошел запрос\");\r\n    console.log(listID);\r\n    const data = await serviceAPI.getTextList(listID);\r\n    console.log(data);\r\n  } catch (error) {\r\n    dispatch(queryTextError(error.message));\r\n  }\r\n};\r\n\r\nexport { queryText };\r\n","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { queryText } from \"../../redux/strings\";\r\nimport styles from \"./FormQuery.module.scss\";\r\n\r\nconst FormQuery = () => {\r\n  const [idText, setIdText] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmitQuery = (event) => {\r\n    event.preventDefault();\r\n    dispatch(queryText(idText));\r\n  };\r\n\r\n  const handleChangeQuery = (event) => {\r\n    let idText = event.target.value;\r\n    setIdText(idText);\r\n  };\r\n\r\n  return (\r\n    <form className={styles.formQuery} onSubmit={handleSubmitQuery}>\r\n      <input\r\n        className={styles.formQuery__input}\r\n        type=\"text\"\r\n        name={idText}\r\n        value={idText}\r\n        onChange={handleChangeQuery}\r\n        placeholder=\"Введите запрос\"\r\n        required\r\n      />\r\n      <button>Подсчитать</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormQuery;\r\n","import FormQuery from \"../FormQuery\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <FormQuery />\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nimport { reducer } from \"./strings\";\r\n\r\nconst middleware = (getDefaultMiddleware) =>\r\n  getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  });\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    isText: reducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport { store };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./Components/App\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}